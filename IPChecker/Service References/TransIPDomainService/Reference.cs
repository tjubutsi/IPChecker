//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IPChecker.TransIPDomainService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.transip.nl/soap", ConfigurationName="TransIPDomainService.DomainServicePortType")]
    public interface DomainServicePortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#batchCheckAvailability", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.DomainCheckResult[] batchCheckAvailability(string[] domainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#batchCheckAvailability", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.DomainCheckResult[]> batchCheckAvailabilityAsync(string[] domainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#checkAvailability", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string checkAvailability(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#checkAvailability", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> checkAvailabilityAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getWhois", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string getWhois(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getWhois", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getWhoisAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getDomainNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string[] getDomainNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getDomainNames", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string[]> getDomainNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.Domain getInfo(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Domain> getInfoAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#batchGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.Domain[] batchGetInfo(string[] domainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#batchGetInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Domain[]> batchGetInfoAsync(string[] domainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getAuthCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string getAuthCode(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getAuthCode", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getAuthCodeAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getIsLocked", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        bool getIsLocked(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getIsLocked", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<bool> getIsLockedAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#register", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void register(IPChecker.TransIPDomainService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#register", ReplyAction="*")]
        System.Threading.Tasks.Task registerAsync(IPChecker.TransIPDomainService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#cancel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void cancel(string domainName, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#cancel", ReplyAction="*")]
        System.Threading.Tasks.Task cancelAsync(string domainName, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#transferWithOwnerChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void transferWithOwnerChange(IPChecker.TransIPDomainService.Domain domain, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#transferWithOwnerChange", ReplyAction="*")]
        System.Threading.Tasks.Task transferWithOwnerChangeAsync(IPChecker.TransIPDomainService.Domain domain, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#transferWithoutOwnerChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void transferWithoutOwnerChange(IPChecker.TransIPDomainService.Domain domain, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#transferWithoutOwnerChange", ReplyAction="*")]
        System.Threading.Tasks.Task transferWithoutOwnerChangeAsync(IPChecker.TransIPDomainService.Domain domain, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setNameservers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void setNameservers(string domainName, IPChecker.TransIPDomainService.Nameserver[] nameservers);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setNameservers", ReplyAction="*")]
        System.Threading.Tasks.Task setNameserversAsync(string domainName, IPChecker.TransIPDomainService.Nameserver[] nameservers);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setLock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void setLock(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setLock", ReplyAction="*")]
        System.Threading.Tasks.Task setLockAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#unsetLock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void unsetLock(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#unsetLock", ReplyAction="*")]
        System.Threading.Tasks.Task unsetLockAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setDnsEntries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void setDnsEntries(string domainName, IPChecker.TransIPDomainService.DnsEntry[] dnsEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setDnsEntries", ReplyAction="*")]
        System.Threading.Tasks.Task setDnsEntriesAsync(string domainName, IPChecker.TransIPDomainService.DnsEntry[] dnsEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void setOwner(string domainName, IPChecker.TransIPDomainService.WhoisContact registrantWhoisContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setOwner", ReplyAction="*")]
        System.Threading.Tasks.Task setOwnerAsync(string domainName, IPChecker.TransIPDomainService.WhoisContact registrantWhoisContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setContacts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void setContacts(string domainName, IPChecker.TransIPDomainService.WhoisContact[] contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#setContacts", ReplyAction="*")]
        System.Threading.Tasks.Task setContactsAsync(string domainName, IPChecker.TransIPDomainService.WhoisContact[] contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getAllTldInfos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.Tld[] getAllTldInfos();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getAllTldInfos", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Tld[]> getAllTldInfosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getTldInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.Tld getTldInfo(string tldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getTldInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Tld> getTldInfoAsync(string tldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getCurrentDomainAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        IPChecker.TransIPDomainService.DomainAction getCurrentDomainAction(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#getCurrentDomainAction", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<IPChecker.TransIPDomainService.DomainAction> getCurrentDomainActionAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#retryCurrentDomainActionWithNewData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void retryCurrentDomainActionWithNewData(IPChecker.TransIPDomainService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#retryCurrentDomainActionWithNewData", ReplyAction="*")]
        System.Threading.Tasks.Task retryCurrentDomainActionWithNewDataAsync(IPChecker.TransIPDomainService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#retryTransferWithDifferentAuthCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void retryTransferWithDifferentAuthCode(IPChecker.TransIPDomainService.Domain domain, string newAuthCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#retryTransferWithDifferentAuthCode", ReplyAction="*")]
        System.Threading.Tasks.Task retryTransferWithDifferentAuthCodeAsync(IPChecker.TransIPDomainService.Domain domain, string newAuthCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#cancelDomainAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DnsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nameserver))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainCheckResult))]
        void cancelDomainAction(IPChecker.TransIPDomainService.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DomainService#DomainServiceServer#cancelDomainAction", ReplyAction="*")]
        System.Threading.Tasks.Task cancelDomainActionAsync(IPChecker.TransIPDomainService.Domain domain);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class DomainCheckResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string domainNameField;
        
        private string statusField;
        
        private string[] actionsField;
        
        /// <remarks/>
        public string domainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
                this.RaisePropertyChanged("domainName");
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("status");
            }
        }
        
        /// <remarks/>
        public string[] actions {
            get {
                return this.actionsField;
            }
            set {
                this.actionsField = value;
                this.RaisePropertyChanged("actions");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class DomainAction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private bool hasFailedField;
        
        private string messageField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        public bool hasFailed {
            get {
                return this.hasFailedField;
            }
            set {
                this.hasFailedField = value;
                this.RaisePropertyChanged("hasFailed");
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("message");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Tld : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private float priceField;
        
        private float renewalPriceField;
        
        private string[] capabilitiesField;
        
        private int registrationPeriodLengthField;
        
        private int cancelTimeFrameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        public float price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
                this.RaisePropertyChanged("price");
            }
        }
        
        /// <remarks/>
        public float renewalPrice {
            get {
                return this.renewalPriceField;
            }
            set {
                this.renewalPriceField = value;
                this.RaisePropertyChanged("renewalPrice");
            }
        }
        
        /// <remarks/>
        public string[] capabilities {
            get {
                return this.capabilitiesField;
            }
            set {
                this.capabilitiesField = value;
                this.RaisePropertyChanged("capabilities");
            }
        }
        
        /// <remarks/>
        public int registrationPeriodLength {
            get {
                return this.registrationPeriodLengthField;
            }
            set {
                this.registrationPeriodLengthField = value;
                this.RaisePropertyChanged("registrationPeriodLength");
            }
        }
        
        /// <remarks/>
        public int cancelTimeFrame {
            get {
                return this.cancelTimeFrameField;
            }
            set {
                this.cancelTimeFrameField = value;
                this.RaisePropertyChanged("cancelTimeFrame");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class DomainBranding : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string companyNameField;
        
        private string supportEmailField;
        
        private string companyUrlField;
        
        private string termsOfUsageUrlField;
        
        private string bannerLine1Field;
        
        private string bannerLine2Field;
        
        private string bannerLine3Field;
        
        /// <remarks/>
        public string companyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("companyName");
            }
        }
        
        /// <remarks/>
        public string supportEmail {
            get {
                return this.supportEmailField;
            }
            set {
                this.supportEmailField = value;
                this.RaisePropertyChanged("supportEmail");
            }
        }
        
        /// <remarks/>
        public string companyUrl {
            get {
                return this.companyUrlField;
            }
            set {
                this.companyUrlField = value;
                this.RaisePropertyChanged("companyUrl");
            }
        }
        
        /// <remarks/>
        public string termsOfUsageUrl {
            get {
                return this.termsOfUsageUrlField;
            }
            set {
                this.termsOfUsageUrlField = value;
                this.RaisePropertyChanged("termsOfUsageUrl");
            }
        }
        
        /// <remarks/>
        public string bannerLine1 {
            get {
                return this.bannerLine1Field;
            }
            set {
                this.bannerLine1Field = value;
                this.RaisePropertyChanged("bannerLine1");
            }
        }
        
        /// <remarks/>
        public string bannerLine2 {
            get {
                return this.bannerLine2Field;
            }
            set {
                this.bannerLine2Field = value;
                this.RaisePropertyChanged("bannerLine2");
            }
        }
        
        /// <remarks/>
        public string bannerLine3 {
            get {
                return this.bannerLine3Field;
            }
            set {
                this.bannerLine3Field = value;
                this.RaisePropertyChanged("bannerLine3");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class DnsEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private int expireField;
        
        private string typeField;
        
        private string contentField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        public int expire {
            get {
                return this.expireField;
            }
            set {
                this.expireField = value;
                this.RaisePropertyChanged("expire");
            }
        }
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("type");
            }
        }
        
        /// <remarks/>
        public string content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
                this.RaisePropertyChanged("content");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class WhoisContact : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string typeField;
        
        private string firstNameField;
        
        private string middleNameField;
        
        private string lastNameField;
        
        private string companyNameField;
        
        private string companyKvkField;
        
        private string companyTypeField;
        
        private string streetField;
        
        private string numberField;
        
        private string postalCodeField;
        
        private string cityField;
        
        private string phoneNumberField;
        
        private string faxNumberField;
        
        private string emailField;
        
        private string countryField;
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("type");
            }
        }
        
        /// <remarks/>
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("firstName");
            }
        }
        
        /// <remarks/>
        public string middleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
                this.RaisePropertyChanged("middleName");
            }
        }
        
        /// <remarks/>
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("lastName");
            }
        }
        
        /// <remarks/>
        public string companyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("companyName");
            }
        }
        
        /// <remarks/>
        public string companyKvk {
            get {
                return this.companyKvkField;
            }
            set {
                this.companyKvkField = value;
                this.RaisePropertyChanged("companyKvk");
            }
        }
        
        /// <remarks/>
        public string companyType {
            get {
                return this.companyTypeField;
            }
            set {
                this.companyTypeField = value;
                this.RaisePropertyChanged("companyType");
            }
        }
        
        /// <remarks/>
        public string street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
                this.RaisePropertyChanged("street");
            }
        }
        
        /// <remarks/>
        public string number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("number");
            }
        }
        
        /// <remarks/>
        public string postalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
                this.RaisePropertyChanged("postalCode");
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("city");
            }
        }
        
        /// <remarks/>
        public string phoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
                this.RaisePropertyChanged("phoneNumber");
            }
        }
        
        /// <remarks/>
        public string faxNumber {
            get {
                return this.faxNumberField;
            }
            set {
                this.faxNumberField = value;
                this.RaisePropertyChanged("faxNumber");
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("email");
            }
        }
        
        /// <remarks/>
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
                this.RaisePropertyChanged("country");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Nameserver : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private string ipv4Field;
        
        private string ipv6Field;
        
        /// <remarks/>
        public string hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("hostname");
            }
        }
        
        /// <remarks/>
        public string ipv4 {
            get {
                return this.ipv4Field;
            }
            set {
                this.ipv4Field = value;
                this.RaisePropertyChanged("ipv4");
            }
        }
        
        /// <remarks/>
        public string ipv6 {
            get {
                return this.ipv6Field;
            }
            set {
                this.ipv6Field = value;
                this.RaisePropertyChanged("ipv6");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Domain : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private Nameserver[] nameserversField;
        
        private WhoisContact[] contactsField;
        
        private DnsEntry[] dnsEntriesField;
        
        private DomainBranding brandingField;
        
        private string authCodeField;
        
        private bool isLockedField;
        
        private bool isLockedFieldSpecified;
        
        private string registrationDateField;
        
        private string renewalDateField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        public Nameserver[] nameservers {
            get {
                return this.nameserversField;
            }
            set {
                this.nameserversField = value;
                this.RaisePropertyChanged("nameservers");
            }
        }
        
        /// <remarks/>
        public WhoisContact[] contacts {
            get {
                return this.contactsField;
            }
            set {
                this.contactsField = value;
                this.RaisePropertyChanged("contacts");
            }
        }
        
        /// <remarks/>
        public DnsEntry[] dnsEntries {
            get {
                return this.dnsEntriesField;
            }
            set {
                this.dnsEntriesField = value;
                this.RaisePropertyChanged("dnsEntries");
            }
        }
        
        /// <remarks/>
        public DomainBranding branding {
            get {
                return this.brandingField;
            }
            set {
                this.brandingField = value;
                this.RaisePropertyChanged("branding");
            }
        }
        
        /// <remarks/>
        public string authCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
                this.RaisePropertyChanged("authCode");
            }
        }
        
        /// <remarks/>
        public bool isLocked {
            get {
                return this.isLockedField;
            }
            set {
                this.isLockedField = value;
                this.RaisePropertyChanged("isLocked");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isLockedSpecified {
            get {
                return this.isLockedFieldSpecified;
            }
            set {
                this.isLockedFieldSpecified = value;
                this.RaisePropertyChanged("isLockedSpecified");
            }
        }
        
        /// <remarks/>
        public string registrationDate {
            get {
                return this.registrationDateField;
            }
            set {
                this.registrationDateField = value;
                this.RaisePropertyChanged("registrationDate");
            }
        }
        
        /// <remarks/>
        public string renewalDate {
            get {
                return this.renewalDateField;
            }
            set {
                this.renewalDateField = value;
                this.RaisePropertyChanged("renewalDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DomainServicePortTypeChannel : IPChecker.TransIPDomainService.DomainServicePortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DomainServicePortTypeClient : System.ServiceModel.ClientBase<IPChecker.TransIPDomainService.DomainServicePortType>, IPChecker.TransIPDomainService.DomainServicePortType {
        
        public DomainServicePortTypeClient() {
        }
        
        public DomainServicePortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainServicePortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainServicePortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IPChecker.TransIPDomainService.DomainCheckResult[] batchCheckAvailability(string[] domainNames) {
            return base.Channel.batchCheckAvailability(domainNames);
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.DomainCheckResult[]> batchCheckAvailabilityAsync(string[] domainNames) {
            return base.Channel.batchCheckAvailabilityAsync(domainNames);
        }
        
        public string checkAvailability(string domainName) {
            return base.Channel.checkAvailability(domainName);
        }
        
        public System.Threading.Tasks.Task<string> checkAvailabilityAsync(string domainName) {
            return base.Channel.checkAvailabilityAsync(domainName);
        }
        
        public string getWhois(string domainName) {
            return base.Channel.getWhois(domainName);
        }
        
        public System.Threading.Tasks.Task<string> getWhoisAsync(string domainName) {
            return base.Channel.getWhoisAsync(domainName);
        }
        
        public string[] getDomainNames() {
            return base.Channel.getDomainNames();
        }
        
        public System.Threading.Tasks.Task<string[]> getDomainNamesAsync() {
            return base.Channel.getDomainNamesAsync();
        }
        
        public IPChecker.TransIPDomainService.Domain getInfo(string domainName) {
            return base.Channel.getInfo(domainName);
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Domain> getInfoAsync(string domainName) {
            return base.Channel.getInfoAsync(domainName);
        }
        
        public IPChecker.TransIPDomainService.Domain[] batchGetInfo(string[] domainNames) {
            return base.Channel.batchGetInfo(domainNames);
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Domain[]> batchGetInfoAsync(string[] domainNames) {
            return base.Channel.batchGetInfoAsync(domainNames);
        }
        
        public string getAuthCode(string domainName) {
            return base.Channel.getAuthCode(domainName);
        }
        
        public System.Threading.Tasks.Task<string> getAuthCodeAsync(string domainName) {
            return base.Channel.getAuthCodeAsync(domainName);
        }
        
        public bool getIsLocked(string domainName) {
            return base.Channel.getIsLocked(domainName);
        }
        
        public System.Threading.Tasks.Task<bool> getIsLockedAsync(string domainName) {
            return base.Channel.getIsLockedAsync(domainName);
        }
        
        public void register(IPChecker.TransIPDomainService.Domain domain) {
            base.Channel.register(domain);
        }
        
        public System.Threading.Tasks.Task registerAsync(IPChecker.TransIPDomainService.Domain domain) {
            return base.Channel.registerAsync(domain);
        }
        
        public void cancel(string domainName, string endTime) {
            base.Channel.cancel(domainName, endTime);
        }
        
        public System.Threading.Tasks.Task cancelAsync(string domainName, string endTime) {
            return base.Channel.cancelAsync(domainName, endTime);
        }
        
        public void transferWithOwnerChange(IPChecker.TransIPDomainService.Domain domain, string authCode) {
            base.Channel.transferWithOwnerChange(domain, authCode);
        }
        
        public System.Threading.Tasks.Task transferWithOwnerChangeAsync(IPChecker.TransIPDomainService.Domain domain, string authCode) {
            return base.Channel.transferWithOwnerChangeAsync(domain, authCode);
        }
        
        public void transferWithoutOwnerChange(IPChecker.TransIPDomainService.Domain domain, string authCode) {
            base.Channel.transferWithoutOwnerChange(domain, authCode);
        }
        
        public System.Threading.Tasks.Task transferWithoutOwnerChangeAsync(IPChecker.TransIPDomainService.Domain domain, string authCode) {
            return base.Channel.transferWithoutOwnerChangeAsync(domain, authCode);
        }
        
        public void setNameservers(string domainName, IPChecker.TransIPDomainService.Nameserver[] nameservers) {
            base.Channel.setNameservers(domainName, nameservers);
        }
        
        public System.Threading.Tasks.Task setNameserversAsync(string domainName, IPChecker.TransIPDomainService.Nameserver[] nameservers) {
            return base.Channel.setNameserversAsync(domainName, nameservers);
        }
        
        public void setLock(string domainName) {
            base.Channel.setLock(domainName);
        }
        
        public System.Threading.Tasks.Task setLockAsync(string domainName) {
            return base.Channel.setLockAsync(domainName);
        }
        
        public void unsetLock(string domainName) {
            base.Channel.unsetLock(domainName);
        }
        
        public System.Threading.Tasks.Task unsetLockAsync(string domainName) {
            return base.Channel.unsetLockAsync(domainName);
        }
        
        public void setDnsEntries(string domainName, IPChecker.TransIPDomainService.DnsEntry[] dnsEntries) {
            base.Channel.setDnsEntries(domainName, dnsEntries);
        }
        
        public System.Threading.Tasks.Task setDnsEntriesAsync(string domainName, IPChecker.TransIPDomainService.DnsEntry[] dnsEntries) {
            return base.Channel.setDnsEntriesAsync(domainName, dnsEntries);
        }
        
        public void setOwner(string domainName, IPChecker.TransIPDomainService.WhoisContact registrantWhoisContact) {
            base.Channel.setOwner(domainName, registrantWhoisContact);
        }
        
        public System.Threading.Tasks.Task setOwnerAsync(string domainName, IPChecker.TransIPDomainService.WhoisContact registrantWhoisContact) {
            return base.Channel.setOwnerAsync(domainName, registrantWhoisContact);
        }
        
        public void setContacts(string domainName, IPChecker.TransIPDomainService.WhoisContact[] contacts) {
            base.Channel.setContacts(domainName, contacts);
        }
        
        public System.Threading.Tasks.Task setContactsAsync(string domainName, IPChecker.TransIPDomainService.WhoisContact[] contacts) {
            return base.Channel.setContactsAsync(domainName, contacts);
        }
        
        public IPChecker.TransIPDomainService.Tld[] getAllTldInfos() {
            return base.Channel.getAllTldInfos();
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Tld[]> getAllTldInfosAsync() {
            return base.Channel.getAllTldInfosAsync();
        }
        
        public IPChecker.TransIPDomainService.Tld getTldInfo(string tldName) {
            return base.Channel.getTldInfo(tldName);
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.Tld> getTldInfoAsync(string tldName) {
            return base.Channel.getTldInfoAsync(tldName);
        }
        
        public IPChecker.TransIPDomainService.DomainAction getCurrentDomainAction(string domainName) {
            return base.Channel.getCurrentDomainAction(domainName);
        }
        
        public System.Threading.Tasks.Task<IPChecker.TransIPDomainService.DomainAction> getCurrentDomainActionAsync(string domainName) {
            return base.Channel.getCurrentDomainActionAsync(domainName);
        }
        
        public void retryCurrentDomainActionWithNewData(IPChecker.TransIPDomainService.Domain domain) {
            base.Channel.retryCurrentDomainActionWithNewData(domain);
        }
        
        public System.Threading.Tasks.Task retryCurrentDomainActionWithNewDataAsync(IPChecker.TransIPDomainService.Domain domain) {
            return base.Channel.retryCurrentDomainActionWithNewDataAsync(domain);
        }
        
        public void retryTransferWithDifferentAuthCode(IPChecker.TransIPDomainService.Domain domain, string newAuthCode) {
            base.Channel.retryTransferWithDifferentAuthCode(domain, newAuthCode);
        }
        
        public System.Threading.Tasks.Task retryTransferWithDifferentAuthCodeAsync(IPChecker.TransIPDomainService.Domain domain, string newAuthCode) {
            return base.Channel.retryTransferWithDifferentAuthCodeAsync(domain, newAuthCode);
        }
        
        public void cancelDomainAction(IPChecker.TransIPDomainService.Domain domain) {
            base.Channel.cancelDomainAction(domain);
        }
        
        public System.Threading.Tasks.Task cancelDomainActionAsync(IPChecker.TransIPDomainService.Domain domain) {
            return base.Channel.cancelDomainActionAsync(domain);
        }
    }
}
